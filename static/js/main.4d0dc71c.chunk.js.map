{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAmJeA,G,UAhJO,WACpB,OACE,yBAAKC,UAAU,WACb,4FACA,i7BAKA,iFACA,2hCAIA,+GACA,wrCAIA,6IACA,uMACA,4BACE,0HACA,4OACA,kYAGA,wMACA,4XAGA,sRACA,qHAGF,mGACA,4BACE,sXAGA,qcAKF,qHACA,4BACE,qjBAEE,4BACE,sUACA,sXAGA,smBAGA,yQAEE,4BACE,sIACA,0HACA,0HACA,wMACA,kHAKR,yTAEE,4BACE,wSACA,gOACA,63BAON,mGACA,4BACE,48BAEE,4BACE,8PACA,8MACA,wIAGJ,2WAKF,iIACA,4BACE,smBAGA,kbAGA,2ZAKF,qHACA,4BACE,oxBAGA,4XAGA,wbAGA,kpBAKF,uIACA,4BACE,kbAGA,yYAKF,0GACA,qOACA,uGAEA,uBAAGA,UAAU,MAAb,mBClIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4d0dc71c.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"content\">\n      <h1>プライバシーポリシー</h1>\n      <p>\n        ボルダリングジムアプリ「POP IN」では、以下の「プライバシーポリシー」に基づき、お客様の個人情報を取り扱います。\n        本アプリケーション上で提供するサービス（以下,「本サービス」といいます。）における，ユーザーの個人情報の取扱いについて，以下のとおりプライバシーポリシー（以下，「本ポリシー」といいます。）を定めます。\n      </p>\n\n      <h2>第1条（個人情報）</h2>\n      <p>\n        「個人情報」とは，個人情報保護法にいう「個人情報」を指すものとし，生存する個人に関する情報であって，当該情報に含まれる氏名，生年月日，住所，電話番号，連絡先その他の記述等により特定の個人を識別できる情報及び容貌，指紋，声紋にかかるデータ，及び健康保険証の保険者番号などの当該情報単体から特定の個人を識別できる情報（個人識別情報）を指します。\n      </p>\n\n      <h2>第2条（個人情報の収集方法）</h2>\n      <p>\n        当社は，ユーザーが利用登録をする際に氏名，生年月日，住所，電話番号，メールアドレス，銀行口座番号，クレジットカード番号，運転免許証番号などの個人情報をお尋ねすることがあります。また，ユーザーと提携先などとの間でなされたユーザーの個人情報を含む取引記録や決済に関する情報を,当社の提携先（情報提供元，広告主，広告配信先などを含みます。以下，｢提携先｣といいます。）などから収集することがあります。\n      </p>\n\n      <h2>第3条（個人情報を収集・利用する目的）</h2>\n      <p>当社が個人情報を収集・利用する目的は，以下のとおりです。</p>\n      <ol>\n        <li>当社サービスの提供・運営のため</li>\n        <li>ユーザーからのお問い合わせに回答するため（本人確認を行うことを含む）</li>\n        <li>\n          ユーザーが利用中のサービスの新機能，更新情報，キャンペーン等及び当社が提供する他のサービスの案内のメールを送付するため\n        </li>\n        <li>メンテナンス，重要なお知らせなど必要に応じたご連絡のため</li>\n        <li>\n          利用規約に違反したユーザーや，不正・不当な目的でサービスを利用しようとするユーザーの特定をし，ご利用をお断りするため\n        </li>\n        <li>ユーザーにご自身の登録情報の閲覧や変更，削除，ご利用状況の閲覧を行っていただくため</li>\n        <li>上記の利用目的に付随する目的</li>\n      </ol>\n\n      <h2>第4条（利用目的の変更）</h2>\n      <ol>\n        <li>\n          当社は，利用目的が変更前と関連性を有すると合理的に認められる場合に限り，個人情報の利用目的を変更するものとします。\n        </li>\n        <li>\n          利用目的の変更を行った場合には，変更後の目的について，当社所定の方法により，ユーザーに通知し，または本ウェブサイト上に公表するものとします。\n        </li>\n      </ol>\n\n      <h2>第5条（個人情報の第三者提供）</h2>\n      <ol>\n        <li>\n          当社は，次に掲げる場合を除いて，あらかじめユーザーの同意を得ることなく，第三者に個人情報を提供することはありません。ただし，個人情報保護法その他の法令で認められる場合を除きます。\n          <ol>\n            <li>人の生命，身体または財産の保護のために必要がある場合であって，本人の同意を得ることが困難であるとき</li>\n            <li>\n              公衆衛生の向上または児童の健全な育成の推進のために特に必要がある場合であって，本人の同意を得ることが困難であるとき\n            </li>\n            <li>\n              国の機関もしくは地方公共団体またはその委託を受けた者が法令の定める事務を遂行することに対して協力する必要がある場合であって，本人の同意を得ることにより当該事務の遂行に支障を及ぼすおそれがあるとき\n            </li>\n            <li>\n              予め次の事項を告知あるいは公表し，かつ当社が個人情報保護委員会に届出をしたとき\n              <ol>\n                <li>利用目的に第三者への提供を含むこと</li>\n                <li>第三者に提供されるデータの項目</li>\n                <li>第三者への提供の手段または方法</li>\n                <li>本人の求めに応じて個人情報の第三者への提供を停止すること</li>\n                <li>本人の求めを受け付ける方法</li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li>\n          前項の定めにかかわらず，次に掲げる場合には，当該情報の提供先は第三者に該当しないものとします。\n          <ol>\n            <li>当社が利用目的の達成に必要な範囲内において個人情報の取扱いの全部または一部を委託する場合</li>\n            <li>合併その他の事由による事業の承継に伴って個人情報が提供される場合</li>\n            <li>\n              個人情報を特定の者との間で共同して利用する場合であって，その旨並びに共同して利用される個人情報の項目，共同して利用する者の範囲，利用する者の利用目的および当該個人情報の管理について責任を有する者の氏名または名称について，あらかじめ本人に通知し，または本人が容易に知り得る状態に置いた場合\n            </li>\n          </ol>\n        </li>\n      </ol>\n\n      <h2>第6条（個人情報の開示）</h2>\n      <ol>\n        <li>\n          当社は，本人から個人情報の開示を求められたときは，本人に対し，遅滞なくこれを開示します。ただし，開示することにより次のいずれかに該当する場合は，その全部または一部を開示しないこともあり，開示しない決定をした場合には，その旨を遅滞なく通知します。なお，個人情報の開示に際しては，1件あたり1，000円の手数料を申し受けます。\n          <ol>\n            <li>本人または第三者の生命，身体，財産その他の権利利益を害するおそれがある場合</li>\n            <li>当社の業務の適正な実施に著しい支障を及ぼすおそれがある場合</li>\n            <li>その他法令に違反することとなる場合</li>\n          </ol>\n        </li>\n        <li>\n          前項の定めにかかわらず，履歴情報および特性情報などの個人情報以外の情報については，原則として開示いたしません。\n        </li>\n      </ol>\n\n      <h2>第7条（個人情報の訂正および削除）</h2>\n      <ol>\n        <li>\n          ユーザーは，当社の保有する自己の個人情報が誤った情報である場合には，当社が定める手続きにより，当社に対して個人情報の訂正，追加または削除（以下，「訂正等」といいます。）を請求することができます。\n        </li>\n        <li>\n          当社は，ユーザーから前項の請求を受けてその請求に応じる必要があると判断した場合には，遅滞なく，当該個人情報の訂正等を行うものとします。\n        </li>\n        <li>\n          当社は，前項の規定に基づき訂正等を行った場合，または訂正等を行わない旨の決定をしたときは遅滞なく，これをユーザーに通知します。\n        </li>\n      </ol>\n\n      <h2>第8条（個人情報の利用停止等）</h2>\n      <ol>\n        <li>\n          当社は，本人から，個人情報が，利用目的の範囲を超えて取り扱われているという理由，または不正の手段により取得されたものであるという理由により，その利用の停止または消去（以下，「利用停止等」といいます。）を求められた場合には，遅滞なく必要な調査を行います。\n        </li>\n        <li>\n          前項の調査結果に基づき，その請求に応じる必要があると判断した場合には，遅滞なく，当該個人情報の利用停止等を行います。\n        </li>\n        <li>\n          当社は，前項の規定に基づき利用停止等を行った場合，または利用停止等を行わない旨の決定をしたときは，遅滞なく，これをユーザーに通知します。\n        </li>\n        <li>\n          前2項にかかわらず，利用停止等に多額の費用を有する場合その他利用停止等を行うことが困難な場合であって，ユーザーの権利利益を保護するために必要なこれに代わるべき措置をとれる場合は，この代替策を講じるものとします。\n        </li>\n      </ol>\n\n      <h2>第9条（プライバシーポリシーの変更）</h2>\n      <ol>\n        <li>\n          本ポリシーの内容は，法令その他本ポリシーに別段の定めのある事項を除いて，ユーザーに通知することなく，変更することができるものとします。\n        </li>\n        <li>\n          当社が別途定める場合を除いて，変更後のプライバシーポリシーは，本ウェブサイトに掲載したときから効力を生じるものとします。\n        </li>\n      </ol>\n\n      <h2>第10条（お問い合わせ窓口）</h2>\n      <p>本ポリシーに関するお問い合わせは，下記の窓口までお願いいたします。</p>\n      <p>Eメールアドレス： now276never0@gmail.com</p>\n\n      <p className=\"tR\">以上</p>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}